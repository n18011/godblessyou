name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './apps/godblessyou/package-lock.json'
      
      - name: Install Dependencies
        run: |
          cd apps/godblessyou
          npm ci
      
      - name: Run Tests
        run: |
          cd apps/godblessyou
          npm run test -- --coverage
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./apps/godblessyou/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './apps/godblessyou/package-lock.json'
      
      - name: Install Dependencies
        run: |
          cd apps/godblessyou
          npm ci
      
      - name: Install Playwright Browsers
        run: |
          cd apps/godblessyou
          npx playwright install --with-deps
      
      - name: Run E2E Tests
        run: |
          cd apps/godblessyou
          npm run test:e2e
          
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/godblessyou/playwright-report/
          retention-days: 30
          
  deploy-test:
    needs: [test, e2e-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/godblessyou
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Setup Kubernetes Tools
        uses: azure/setup-kubectl@v3
        
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        
      - name: Deploy to Test Environment
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=./kubeconfig
          
          cd overlays/development
          kustomize edit set image godblessyou=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl apply -k .
        env:
          KUBECONFIG: ./kubeconfig
          
  deploy-to-production:
    needs: [test, e2e-test, security-scan, deploy-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Kubernetes Tools
        uses: azure/setup-kubectl@v3
        
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        
      - name: Deploy to Production
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" > kubeconfig
          export KUBECONFIG=./kubeconfig
          
          cd overlays/production
          kustomize edit set image godblessyou=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          kubectl apply -k .
        env:
          KUBECONFIG: ./kubeconfig 